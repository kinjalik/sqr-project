name: CI
on: pull_request

permissions:
  checks: write
  contents: write
  pull-requests: write
  security-events: write

jobs:
  pylint-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init
        uses: ./.github/actions/init

      - name: Add matcher
        run: echo "::add-matcher::.github/matchers/pylint.json"

      - name: Run pylint
        run: make lint-pylint

  flake8-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init
        uses: ./.github/actions/init

      - name: Add matcher
        run: echo "::add-matcher::.github/matchers/flake8.json"

      - name: Run flake8
        run: make lint-flake8 SILENT=1
        

  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init
        uses: ./.github/actions/init
      - name: Run tests
        run: |
          make ARGS="--junitxml=$(pwd)/report.junit.xml" coverage-backend | tee pytest-coverage.txt || true
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure()
        with:
          report_paths: "*.junit.xml"
          check_name: Backend Tests
      
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        if: success() || failure()
        with:
          pytest-coverage-path: pytest-coverage.txt
          junitxml-path: report.junit.xml
          title: Coverage Report
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: Coverage report
          path: coverage_report

  bandit-sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init
        uses: ./.github/actions/init

      - name: Backend check
        run: make security-backend ARGS="-f sarif -o $(pwd)/backend.bandit.sarif --exit-zero"
      - name: Frontend check
        run: make security-frontend ARGS="-f sarif -o $(pwd)/frontend.bandit.sarif --exit-zero"

      - name: Upload fbackend SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: backend.bandit.sarif
          category: bandit-backend
      - name: Upload frontend SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: frontend.bandit.sarif
          category: bandit-frontend

      - name: Upload SARIF reports as artifacts
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: security_reports
          path: '*.sarif'
  
  snyk-sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init
        uses: ./.github/actions/init
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload snyk SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: snyk.sarif
          category: snyk
      - name: Upload SARIF reports as artifacts
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: snyk
          path: '*.sarif'

  smoke-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init
        uses: ./.github/actions/init

      - name: Start docker-compose
        run: make docker-run ARGS='-d --wait --wait-timeout 60'
      - name: Stop docker-compose
        if: success() || failure()
        run: docker-compose down

  system-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init
        uses: ./.github/actions/init
      - name: Install software
        run: sudo apt-get install -y chromium-browser
      - name: Start docker-compose
        run: make docker-run ARGS='-d --wait --wait-timeout 60'
      - name: Run tests
        run: |
          make ARGS="--junitxml=$(pwd)/report.junit.xml" test-frontend
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure()
        with:
          report_paths: "*.junit.xml"
          check_name: System Tests
      